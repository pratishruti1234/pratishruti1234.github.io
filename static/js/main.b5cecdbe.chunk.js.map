{"version":3,"sources":["Countries.js","serviceWorker.js","index.js"],"names":["Countries","state","arr","axios","get","then","posRes","setState","data","errRes","console","log","border","cellPadding","style","backgroundColor","this","map","element","index","key","name","capital","population","width","height","src","flag","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"8RAEqBA,E,kDACjB,aAAc,IAAD,8BACT,gBACKC,MAAM,CACPC,IAAM,IAHD,E,gEAMO,IAAD,OACfC,IAAMC,IAAI,wCACTC,MAAK,SAACC,GACH,EAAKC,SAAS,CACRL,IAAMI,EAAOE,UAErB,SAACC,GACCC,QAAQC,IAAIF,Q,+BAKX,IAAD,EACJ,OACI,6BACI,8BAAOG,OAAO,IAAIC,YAAY,QAA9B,4BAAiD,QAAjD,sBAA8D,UAA9D,GACI,2BAAOC,MAAO,CAACC,gBAAgB,QAC3B,4BACI,mCACA,oCACA,uCAEA,0CACA,sCAGR,+BACCC,KAAKf,MAAMC,IAAIe,KAAI,SAACC,EAAQC,GAAT,OACZ,wBAAIC,IAAKD,GACb,4BAAKA,EAAM,GACX,4BAAKD,EAAQG,MACb,4BAAKH,EAAQI,SAEb,4BAAKJ,EAAQK,YACb,4BAAI,yBAAMC,MAAM,QAAQC,OAAO,QAAQC,IAAKR,EAAQS,mB,GAzCrCC,IAAMC,WCUvCC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACThC,MAAK,SAAAqC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB3C,QACfsC,UAAUC,cAAcO,YAI1BrC,QAAQC,IACN,iHAKE2B,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBhC,QAAQC,IAAI,sCAGR2B,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5BQ,OAAM,SAAAC,GACLzC,QAAQyC,MAAM,4CAA6CA,MC1FjEC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDcnB,SAAkBjB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,mBAAwBzB,OAAOC,SAASyB,MACpDC,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,QAAQ,WAC9B,IAAMvB,EAAK,UAAMoB,mBAAN,sBAEP3B,IAgEV,SAAiCO,EAAOC,GAEtCuB,MAAMxB,EAAO,CACXyB,QAAS,CAAE,iBAAkB,YAE5BzD,MAAK,SAAA0D,GAEJ,IAAMC,EAAcD,EAASD,QAAQ1D,IAAI,gBAEnB,MAApB2D,EAASE,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5C3B,UAAUC,cAAc2B,MAAM9D,MAAK,SAAAqC,GACjCA,EAAa0B,aAAa/D,MAAK,WAC7B2B,OAAOC,SAASoC,eAKpBjC,EAAgBC,EAAOC,MAG1BY,OAAM,WACLxC,QAAQC,IACN,oEAvFA2D,CAAwBjC,EAAOC,GAI/BC,UAAUC,cAAc2B,MAAM9D,MAAK,WACjCK,QAAQC,IACN,iHAMJyB,EAAgBC,EAAOC,OCpC/BE,K","file":"static/js/main.b5cecdbe.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport axios from 'axios';\r\nexport default class Countries extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            arr : []\r\n        };\r\n    }\r\n    componentDidMount(){\r\n        axios.get(\"https://restcountries.eu/rest/v2/all\")\r\n        .then((posRes)=>{\r\n            this.setState({\r\n                  arr : posRes.data\r\n            })\r\n        },(errRes)=>{\r\n            console.log(errRes);\r\n\r\n        });\r\n\r\n    };\r\n    render(){\r\n        return(\r\n            <div>\r\n                <table border=\"1\" cellPadding=\"10px\" cellPadding=\"10px\" align=\"center\">\r\n                    <thead style={{backgroundColor:\"red\"}}>\r\n                        <tr>\r\n                            <th>SNO</th>\r\n                            <th>NAME</th>\r\n                            <th>CAPITAL</th>\r\n                            \r\n                            <th>POPULATION</th>\r\n                            <th>FLAG</th>\r\n                        </tr>\r\n                         </thead>\r\n                    <tbody>\r\n                    {this.state.arr.map((element,index)=>(\r\n                            <tr key={index} >\r\n                        <td>{index+1}</td>\r\n                        <td>{element.name}</td>\r\n                        <td>{element.capital}</td>\r\n                        \r\n                        <td>{element.population}</td>\r\n                        <td><img  width=\"100px\" height=\"100px\" src={element.flag}></img></td>\r\n\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Countries from './Countries';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Countries/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}